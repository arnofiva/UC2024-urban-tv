import{aj as i,ak as s,am as y,aq as g,dg as m,eo as v,ah as k,ja as b,a$ as C,lU as _,aK as H,ay as L,dP as $}from"./index-75797708.js";import{a as E}from"./EdgeWorkerHandle-7a5403af.js";import{h as O}from"./WorkerHandle-becb41d0.js";import{p as w,a as I,b as V}from"./SnappingManagerPool-04d35fa6.js";import{r as R}from"./VertexSnappingCandidate-43f41259.js";import"./workerHelper-a9182cf3.js";import"./geodesicLengthMeasurementUtils-d6665296.js";import"./geometryEngine-e08263d2.js";import"./geometryEngineBase-1fd17bb5.js";import"./hydrated-109b30e2.js";import"./geometry2dUtils-8e7f7801.js";import"./FeatureFilter-9d3ae08e.js";import"./floorFilterUtils-73949d2d.js";import"./keybindings-7c7d5818.js";import"./PointSnappingHint-d297cb04.js";let d=class extends g{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new j(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:a}=e,o=x;this.renderCoordsHelper.toRenderCoords(a,r.spatialReference,o);const h=e.distance,c=typeof h=="number"?h:h.distance,p=await this._workerHandle.invoke({bounds:m(o[0],o[1],o[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return p.candidates.sort((u,f)=>u.distance-f.distance),p.candidates.map(u=>this._convertCandidate(r,u))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new I({objectId:t.objectId,targetPoint:w(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new R({objectId:t.objectId,targetPoint:w(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=v();return this.renderCoordsHelper.fromRenderCoords(t,r,e),V(r)}async _fetchAllEdgeLocations(e,t){const r=[],a=[];for(const{id:o,uid:h}of e.components)this._ids.has(o)&&r.push((async()=>{const c=await this.fetchEdgeLocations(o,t.signal),p=c.locations.buffer;return a.push(p),{id:o,uid:h,objectIds:c.objectIds,locations:p,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter(({id:o})=>this._ids.has(o))},transferList:a}}};i([s({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([s({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([s({constructOnly:!0})],d.prototype,"schedule",void 0),i([s({readOnly:!0})],d.prototype,"availability",void 0),d=i([y("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let j=class extends O{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const x=v();let n=class extends g{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new k,this._abortController=new AbortController}destroy(){this._tracker=b(this._tracker),this._abortController=C(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new E(S(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:S(t),fetchEdgeLocations:async(r,a)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,a)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([_(this._workerHandle),_(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const e=this._abortController?.signal,t=await this.getLayerView();t==null||H(e)||(this._tracker=t.trackSnappingSources({add:(r,a)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:r,bounds:a},e))},remove:r=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:r},e))}}))}};function S(e){return t=>e.immediate.schedule(t)}i([s({constructOnly:!0})],n.prototype,"getLayerView",void 0),i([s({constructOnly:!0})],n.prototype,"view",void 0),i([s({readOnly:!0})],n.prototype,"updating",null),i([s({readOnly:!0})],n.prototype,"availability",void 0),n=i([y("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],n);let l=class extends g{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(a=>a.fetchCandidates(e,t)));return L(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new n({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter($)}_getSceneLayerI3SSource(e,t){return new n({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};i([s({constructOnly:!0})],l.prototype,"layerSource",void 0),i([s({constructOnly:!0})],l.prototype,"view",void 0),i([s({readOnly:!0})],l.prototype,"updating",null),i([s({readOnly:!0})],l.prototype,"availability",void 0),l=i([y("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
