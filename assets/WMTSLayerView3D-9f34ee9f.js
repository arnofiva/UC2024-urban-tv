import{c$ as d,eC as f,aQ as m,aL as n,aj as l,ak as a,am as p}from"./index-cc5260cc.js";import{l as u}from"./LayerView3D-0ab14795.js";import{p as c}from"./TiledLayerView3D-198e47a2.js";import{i as y}from"./fetchTile-d61d2504.js";import{y as g}from"./LayerView-f3b96680.js";import{i as I}from"./RefreshableLayerView-59307f98.js";import"./RefreshableLayer-79d78805.js";import"./layerContainerType-e1118fe6.js";let r=class extends I(c(u(g))){constructor(){super(...arguments),this.type="wmts-3d"}initialize(){this._getCompatibleTileInfoMatrixSet(t=>this._getTileInfoSupportError(t.tileInfo,t.fullExtent));const e=d(()=>this.view?.basemapTerrain?.tilingSchemeLocked).then(()=>{const t=this._getCompatibleTileInfoMatrixSet(i=>this._getTileInfoError(i.tileInfo,i.fullExtent));t!=null&&(t.id!==null&&this.layer.activeLayer.tileMatrixSetId!==t.id&&(this.layer.activeLayer.tileMatrixSetId=t.id),t.tileInfo&&(this.tileInfo=t.tileInfo),this.layer.fullExtent=t.fullExtent)});this.addResolvingPromise(e),this.when(()=>this._postInitialize())}refresh(){this.emit("data-changed")}canResume(){if(!super.canResume())return!1;const e=this.layer.activeLayer.tileMatrixSet;return e!=null&&!this._getTileInfoError(e.tileInfo,e.fullExtent)}async fetchTile(e,t){return y(this,e,t)}async doRefresh(){this.suspended||this.emit("data-changed")}_postInitialize(){this._updatingHandles.add(()=>this.layer?.activeLayer?.styleId,()=>this.refresh()),this._updatingHandles.add(()=>this.layer?.activeLayer,e=>{const t=this._getCompatibleTileInfoMatrixSet(i=>this._getTileInfoError(i.tileInfo,i.fullExtent),!0);t&&t.id!=null&&e.tileMatrixSetId!==t.id&&(this.layer.activeLayer.tileMatrixSetId=t.id),this.notifyChange("suspended"),this.canResume()&&this.refresh()})}_getCompatibleTileInfoMatrixSet(e,t=!1){const i=f(this.layer);if(i!=null){if(m.isCollection(i))return i.find(h=>{const s=e(h);return s!=null&&(t?n.getLogger(this).error("The selected tile matrix set is not compatible with the view",s):this.addResolvingPromise(Promise.reject(s))),s==null});const o=e(i);return o!=null&&(t?n.getLogger(this).error("The selected tile matrix set is not compatible with the view",o):this.addResolvingPromise(Promise.reject(o))),i}return null}_getTileInfoError(e,t){return this._getTileInfoSupportError(e,t)||this._getTileInfoCompatibilityError(e,this.view.basemapTerrain.tilingScheme)}};l([a()],r.prototype,"layer",void 0),l([a()],r.prototype,"suspended",void 0),l([a()],r.prototype,"tileInfo",void 0),r=l([p("esri.views.3d.layers.WMTSLayerView3D")],r);const b=r;export{b as default};
