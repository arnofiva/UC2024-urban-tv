import{gT as b,gU as w,ar as T,aQ as y,au as _,at as g,d9 as h,hf as D,aL as c,hg as S,dp as L,dl as M,dq as v,bH as E,aj as n,ak as r,az as k,bW as A,am as N,du as R,dv as I,aB as C}from"./index-cc5260cc.js";import{a as l,M as G,T as $,E as O}from"./KnowledgeGraphSublayer-80df995e.js";import{l as U}from"./ArcGISService-1e89e6ee.js";import{e as j}from"./CustomParametersMixin-022b66c4.js";import{b as z}from"./OperationalLayer-eea4a77f.js";import{j as P}from"./PortalLayer-cb90e0d1.js";import{f as F}from"./RefreshableLayer-79d78805.js";import{p as K}from"./commonProperties-cc82f359.js";import{R as x}from"./knowledgeGraphService-937abdca.js";import"./UniqueValueRenderer-54c126a1.js";import"./ColorStop-e7316361.js";import"./diffUtils-b3bd11bb.js";import"./colorRamps-381886f3.js";import"./jsonUtils-d6eedba0.js";import"./FieldsIndex-fc537b48.js";import"./UnknownTimeZone-65f60a9d.js";import"./heatmapUtils-829de23b.js";import"./FeatureStore-e7dab1c0.js";import"./BoundsStore-c2f45b53.js";import"./PooledRBush-b303a9ba.js";import"./quickselect-5dd9f478.js";import"./QueryEngine-e0583590.js";import"./normalizeUtils-41f60ca4.js";import"./normalizeUtilsCommon-c508a8dd.js";import"./WhereClause-dc2df372.js";import"./TimeOnly-c09c3620.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-85c4f1d0.js";import"./utils-5c62c90d.js";import"./utils-5ccd56d9.js";import"./utils-3bda65f2.js";import"./ClassBreaksDefinition-4f1ef2f1.js";import"./optimizedFeatureQueryEngineAdapter-49b776e3.js";import"./clientSideDefaults-03755ffc.js";import"./Relationship-65ff6c37.js";import"./fieldProperties-b09a085d.js";import"./FeatureEffectLayer-9456450f.js";import"./FeatureEffect-da20b8a2.js";import"./FeatureFilter-c2612386.js";import"./FeatureReductionLayer-a3876c48.js";import"./layerContainerType-e1118fe6.js";import"./FeatureReductionSelection-1b281cc7.js";import"./labelingInfo-2649050a.js";import"./featureQueryAll-2e5a1e8f.js";import"./RelationshipQuery-5068e864.js";import"./MD5-715f37cd.js";import"./OrderedLayer-9d57a54d.js";import"./TemporalLayer-05e13040.js";import"./TimeInfo-d0e81af7.js";import"./FeatureSet-61e08bb9.js";import"./popupUtils-0f067087.js";let s=class extends b(w(F(U(z(P(T(j(C)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(y.ofType(l)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(y.ofType(l)),this.type="knowledge-graph",this.url=null}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(t){_(t)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache()}async _fetchMetadata(){if(!this.url)throw new g("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await x(this.url);this.knowledgeGraph=e,this._forEachGraphType(t=>{t.name&&this._graphTypeLookup.set(t.name,t)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===h.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new G({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await $(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(t=>{const i=this._graphTypeLookup.get(t.graphTypeName);i&&!e.namedTypeDefinitions.has(i.name)&&e.namedTypeDefinitions.set(i.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,D(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:t}=e;if(t?.size>0)t.forEach((i,a)=>{const o=this._graphTypeLookup.get(a);if(!o)return c.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void t.delete(a);o.type!=="relationship"&&o.type!=="entity"&&(c.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),t.delete(a))});else if(!e.generateAllSublayers)throw new g("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],t=[];const{inclusionModeDefinition:i}=this,a=i?.namedTypeDefinitions;!i||i.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],t=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach((o,d)=>{const p=this._graphTypeLookup.get(d);switch(p?.type){case"relationship":t.push(p);break;case"entity":e.push(p)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=t}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach(t=>{e(t)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const i of e)this.sublayerIdsCache.has(i.typeName)||(this.sublayerIdsCache.set(i.typeName,new Set),t.push(i.typeName)),this.sublayerIdsCache.get(i.typeName).add(i.id);for(const i of t){const a=this._graphTypeLookup.get(i);a&&(this._addSublayer(a).title=i,a.type==="entity"?this.dataManager.entityTypeNames.add(i):this.dataManager.relationshipTypeNames.add(i),this.dataManager.sublayerCaches.set(i,new Map))}this._refreshNamedTypes()}_createSublayers(e,t,i){e.forEach(a=>{const o=this._createSublayer(a);i(o)&&t.push(o),this._updateSublayerCaches(a)})}_addSublayer(e){const t=this._createSublayer(e);return t.geometryType?this.layers.push(t):this.tables.push(t),t}_createSublayer(e){return new l({objectType:e,parentCompositeLayer:this,graphType:e.type,title:e.name})}_updateSublayers(e,t){t.forEach(i=>{i.parentCompositeLayer=this;const a=e.find(o=>o.type===i.graphType&&o.name===i.graphTypeName);a&&(i.objectType=a,i.read({title:a.name},{origin:"service"}),this._updateSublayerCaches(a))})}_updateSublayerCaches(e){const t=this.dataManager.sublayerCaches;t.has(e.name)||t.set(e.name,new Map)}_saveUrlAsNewResource(e,t,i,a){e[t]="<pending>",i.pendingOperations.push(B(this.inclusionModeDefinition).then(o=>{const d=V(a);e[t]=d.itemRelativeUrl,i.toAdd.push({resource:d,content:{type:"blob",blob:o},compress:!1,finish:p=>{this.definitionSetMap=p.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:t}]of e.namedTypeDefinitions)if(!t)return!1;return!0}readDefinitionSetMap(e,t,i){return S(e,i)}writeDefinitionSetMap(e,t,i,a){const o=a?.portalItem,d=a?.resources,p=L(a?.origin);if(!o||!d||p==null)return void(e&&(t[i]=M(e,a)));const{inclusionModeDefinition:u}=this;if(!u||this._displaysAllRecords(u))return void(this.definitionSetMap=null);const m=this.originIdOf("inclusionModeDefinition");if(m===h.USER||this._namedTypesModified||p<m)this._saveUrlAsNewResource(t,i,d,o);else if(p===m&&e){const f=M(e,a);v(f)?this._saveUrlAsNewResource(t,i,d,o):t[i]=f}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):c.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.originIdOf("layers")===h.DEFAULTS?this._createSublayers(e,this.layers,t=>!!t.geometryType):this._updateSublayers(e,this.layers),this.originIdOf("tables")===h.DEFAULTS?this._createSublayers(e,this.tables,t=>!t.geometryType):this._updateSublayers(e,this.tables),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((t,i)=>{const a=E(this.sublayerIdsCache,i,()=>new Set);t.members?.forEach(o=>{a.add(o.id)})})}async addRecords(e){await this._handleNewRecords(e)}async removeRecords(e){const t=[];for(const i of e)this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(i.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(i.typeName)?.members?.has(i.id)&&t.push(i);this.dataManager.removeFromLayer(t);for(const i of t)this.sublayerIdsCache.get(i.typeName)?.delete(i.id);return this._refreshNamedTypes(),t}};n([r()],s.prototype,"dataManager",void 0),n([r({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],s.prototype,"definitionSetMap",void 0),n([k("definitionSetMap")],s.prototype,"readDefinitionSetMap",null),n([A("definitionSetMap")],s.prototype,"writeDefinitionSetMap",null),n([r()],s.prototype,"inclusionModeDefinition",null),n([r()],s.prototype,"knowledgeGraph",void 0),n([r({type:y.ofType(l),json:{write:{ignoreOrigin:!0}}})],s.prototype,"layers",void 0),n([r()],s.prototype,"memberEntityTypes",void 0),n([r()],s.prototype,"memberRelationshipTypes",void 0),n([r({type:["KnowledgeGraphLayer"]})],s.prototype,"operationalLayerType",void 0),n([r()],s.prototype,"sublayerIdsCache",void 0),n([r({type:y.ofType(l),json:{write:{ignoreOrigin:!0}}})],s.prototype,"tables",void 0),n([r({json:{read:!1}})],s.prototype,"type",void 0),n([r(K)],s.prototype,"url",void 0),s=n([N("esri.layers.KnowledgeGraphLayer")],s);const xe=s;async function B(e){const t=await O(e);return new Blob([t],{type:"application/x-protobuf"})}function V(e){const t=`definitionSetMap-${R()}.dat`,i=I("knowledgeGraphLayer",t);return e.resourceFromPath(i)}export{xe as default};
