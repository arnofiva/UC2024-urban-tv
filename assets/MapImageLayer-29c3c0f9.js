import{gT as S,gU as I,ar as w,au as T,dp as f,d9 as u,hh as $,hi as O,av as g,bS as P,cD as E,h3 as L,at as b,bf as F,aj as a,ak as o,cJ as v,az as M,bW as R,am as j,hj as J,aB as N}from"./index-75797708.js";import{i as U}from"./APIKeyMixin-83f77fe3.js";import{m as _,f as q,t as A}from"./SublayersOwner-666ffa97.js";import{l as k}from"./ArcGISService-d812484b.js";import{e as V}from"./CustomParametersMixin-8721f5b8.js";import{b as z}from"./OperationalLayer-4cc379ff.js";import{j as B}from"./PortalLayer-995215c8.js";import{f as D}from"./RefreshableLayer-fb6b2fc5.js";import{l as W}from"./TemporalLayer-0399f521.js";import{p as Z}from"./commonProperties-97bbff58.js";import{y as C}from"./ExportImageParameters-c9d9e113.js";import{t as G}from"./imageBitmapUtils-9341f582.js";import{e as x}from"./sublayerUtils-91ec9f35.js";import{t as H}from"./versionUtils-dda94076.js";import"./UniqueValueRenderer-e5955946.js";import"./ColorStop-6a565283.js";import"./diffUtils-0e3a2a24.js";import"./colorRamps-aa93f22c.js";import"./jsonUtils-e39cab6d.js";import"./FieldsIndex-e68ff75c.js";import"./UnknownTimeZone-bc39bc88.js";import"./heatmapUtils-b63f4199.js";import"./QueryTask-cf21e623.js";import"./executeForIds-a35d422d.js";import"./query-dd3a3bae.js";import"./normalizeUtils-14f09049.js";import"./normalizeUtilsCommon-eecee6b6.js";import"./pbfQueryUtils-335efe71.js";import"./pbf-19f7cae1.js";import"./queryZScale-2c7fab80.js";import"./executeQueryJSON-63562981.js";import"./FeatureSet-285ce5c1.js";import"./executeQueryPBF-6da5cff7.js";import"./labelingInfo-6875761c.js";import"./featureQueryAll-8963e799.js";import"./RelationshipQuery-fd495a9f.js";import"./FeatureType-01c856b1.js";import"./FeatureTemplate-a8080318.js";import"./LayerFloorInfo-9ce38ca0.js";import"./Relationship-8c123d3c.js";import"./serviceCapabilitiesUtils-33da8a9b.js";import"./popupUtils-7d91b48e.js";import"./layerContainerType-e1118fe6.js";import"./TimeInfo-448b5524.js";import"./floorFilterUtils-73949d2d.js";let t=class extends S(W(I(_(q(k(z(B(w(D(U(V(N)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new C({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(T).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,s){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const m=f(s.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(m===u.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=x(n,i,u.SERVICE)}else if(m>u.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=x(n,i.sublayers,f(i.origin))}}const h=[],d={writeSublayerStructure:p,...s};let y=p||this.hasVisibleLayersForOrigin(m);n.forEach(i=>{const c=i.write({},d);h.push(c),y=y||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(r.layers=h),y&&(r.visibleLayers=n.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,r,l,s){const n=s?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=$({extent:e,width:r})*n;const p=this._exportImageParameters.toJSON(),m=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=e?.spatialReference,d=O(h);p.dpi*=n;const y={};if(s?.timeExtent){const{start:i,end:c}=s.timeExtent.toJSON();y.time=i&&c&&i===c?""+i:`${i??"null"},${c??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:d,imageSR:d,size:r+","+l,...p,...m,...y}}async fetchImage(e,r,l,s){const{data:n}=await this._fetchImage("image",e,r,l,s);return n}async fetchImageBitmap(e,r,l,s){const{data:n,url:p}=await this._fetchImage("blob",e,r,l,s);return G(n,p,s?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await g(this.url,r),{extent:s,fullExtent:n,timeExtent:p}=l,m=s||n;return{fullExtent:m&&P.fromJSON(m),timeExtent:p&&E.fromJSON({start:p[0],end:p[1]})}}loadAll(){return L(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return H(this,e)}async _fetchImage(e,r,l,s,n){const p={responseType:e,signal:n?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,s,n),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await g(m,p);return{data:h,url:m}}catch(h){throw F(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};a([o(v("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),a([o({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),a([o()],t.prototype,"dpi",void 0),a([o()],t.prototype,"gdbVersion",void 0),a([o()],t.prototype,"imageFormat",void 0),a([M("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),a([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),a([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),a([o()],t.prototype,"imageTransparency",void 0),a([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),a([o({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),a([o({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),a([o({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),a([o(v("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),a([o()],t.prototype,"sourceJSON",void 0),a([o({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),a([R("sublayers",{layers:{type:[A]},visibleLayers:{type:[J]}})],t.prototype,"writeSublayers",null),a([o({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),a([o({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),a([o(Z)],t.prototype,"url",void 0),t=a([j("esri.layers.MapImageLayer")],t);const Ve=t;export{Ve as default};
