import{at as h,as as y,aI as u,aJ as n,aK as m,aL as f,aj as l,ak as c,am as p}from"./index-cc5260cc.js";import{s as g,a as v}from"./LercDecoder-e116bf50.js";import{l as w}from"./LayerView3D-0ab14795.js";import{p as $}from"./TiledLayerView3D-198e47a2.js";import{y as D}from"./LayerView-f3b96680.js";import"./WorkerHandle-84d2d787.js";let a=class extends $(w(D)){constructor(){super(...arguments),this.type="elevation-3d"}get tileInfo(){return this.layer.tileInfo}initialize(){const e=this.view,t=e.map?.allLayers,s=t&&t.includes(this.layer),i=e.map?.ground?.layers,o=i&&i.includes(this.layer);if(s&&!o){const r=new h("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(r))}this._lercDecoder=g(e.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=y(this._lercDecoder)}async fetchTile(e,t){const s=this.layer;if(u(s)){const d=await s.fetchTile(e[0],e[1],e[2],{noDataValue:n,signal:t.signal});return m(t)?void f.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):d}const i=this.getTileUrl(e),o=await t.requester.request(i,"binary",t),r=await this._lercDecoder.decode(o,{noDataValue:n},t.signal);if(r)return new v(r);throw new Error("LERC decoding failed")}};l([c()],a.prototype,"layer",void 0),l([c()],a.prototype,"tileInfo",null),a=l([p("esri.views.3d.layers.ElevationLayerView3D")],a);const E=a;export{E as default};
