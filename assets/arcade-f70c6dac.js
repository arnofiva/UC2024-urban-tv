import{at as g,cC as G,dK as L,b3 as P,aX as I}from"./index-cc5260cc.js";import{n as T,a as F,m as $}from"./TimeOnly-c09c3620.js";import{t as J}from"./ImmutableArray-d5cad66d.js";import M from"./FeatureLayer-58bac8c7.js";import{d as z}from"./FeatureSet-61e08bb9.js";import"./UnknownTimeZone-65f60a9d.js";import"./UniqueValueRenderer-54c126a1.js";import"./ColorStop-e7316361.js";import"./diffUtils-b3bd11bb.js";import"./colorRamps-381886f3.js";import"./jsonUtils-d6eedba0.js";import"./FieldsIndex-fc537b48.js";import"./heatmapUtils-829de23b.js";import"./layerContainerType-e1118fe6.js";import"./FeatureLayerBase-c09abbf7.js";import"./commonProperties-cc82f359.js";import"./labelingInfo-2649050a.js";import"./featureQueryAll-2e5a1e8f.js";import"./RelationshipQuery-5068e864.js";import"./LayerFloorInfo-82f1798b.js";import"./Relationship-f4eb2e1b.js";import"./serviceCapabilitiesUtils-31453300.js";import"./editsZScale-91075600.js";import"./queryZScale-f9bc9d46.js";import"./APIKeyMixin-f0b323b6.js";import"./ArcGISService-1e89e6ee.js";import"./CustomParametersMixin-022b66c4.js";import"./EditBusLayer-682f4aae.js";import"./FeatureEffectLayer-9456450f.js";import"./FeatureEffect-da20b8a2.js";import"./FeatureFilter-c2612386.js";import"./FeatureReductionLayer-a3876c48.js";import"./FeatureReductionSelection-1b281cc7.js";import"./MD5-715f37cd.js";import"./OperationalLayer-eea4a77f.js";import"./OrderedLayer-9d57a54d.js";import"./PortalLayer-cb90e0d1.js";import"./RefreshableLayer-79d78805.js";import"./TemporalLayer-05e13040.js";import"./TimeInfo-d0e81af7.js";import"./FeatureTemplate-edc74dae.js";import"./FeatureType-b9b4fbb3.js";import"./fieldProperties-b09a085d.js";import"./versionUtils-a9961bf2.js";import"./styleUtils-b6d5f632.js";import"./TopFeaturesQuery-90f2643b.js";import"./popupUtils-0f067087.js";let b=null;function E(e,n,r,o={}){const a=n.elementType,i="value",p=a.type==="array"?[{name:i,type:a.type,elementType:a.elementType}]:a.type==="dictionary"?[{name:i,type:a.type,properties:a.properties}]:[{name:i,type:a.type}];return new J(e.map(s=>{const t={};return w(t,p,{[i]:s},r,o),t[i]}))}function K(e,n,r={}){const o=e instanceof z?new M({source:e.features,geometryType:e.geometryType,fields:e.fields,spatialReference:e.spatialReference}):e;return n.constructFeatureSet(o,r.spatialReference,null,!0,r.lruCache,r.interceptor)}function N(e,n,r={}){const{spatialReference:o,interceptor:a,lruCache:i}=r;return typeof e=="string"?n.createFeatureSetCollectionFromService(e,o,i,a):n.createFeatureSetCollectionFromMap(e,o,i,a)}function X(e,n,r,o={}){const a={};return w(a,n.properties,e,r,o),new b.Dictionary(a)}function w(e,n,r,o,a={}){const i={};for(const p of Object.keys(r))i[p.toLowerCase()]=r[p];for(const p of n){const s=p.name.toLowerCase();if(a.variablesPreProcessed)e[s]=i[s];else switch(p.type){case"array":{const t=i[s];e[s]=t==null?null:E(t,p,o,a);break}case"feature":{const t=i[s];e[s]=t==null?null:b.Feature.createFromGraphic(t,a?.timeZone);break}case"featureSet":{const t=i[s];e[s]=t==null?null:o?K(t,o,a):null;break}case"featureSetCollection":{const t=i[s];e[s]=t==null?null:o?N(t,o,a):null;break}case"dictionary":{const t=i[s];e[s]=t==null?null:X(t,p,o,a);break}case"date":{const t=i[s];e[s]=t?t instanceof $?t:a?.timeZone?$.dateJSAndZoneToArcadeDate(t,a?.timeZone):$.dateJSToArcadeDate(t):null;break}case"dateOnly":{const t=i[s];e[s]=t?t instanceof F?t:F.fromReader(t):null;break}case"time":{const t=i[s];e[s]=t?t instanceof T?t:T.fromReader(t):null;break}case"knowledgeGraph":case"geometry":case"boolean":case"text":case"number":e[s]=i[s]}}}function U(e,n){for(const r of e)n.push(r),r.type==="dictionary"&&U(r.properties,n);return n}function R(e,n,r,o,a){const{spatialReference:i,interceptor:p,lruCache:s,console:t,abortSignal:m,timeZone:l,services:S={portal:P.getDefault()}}=r,f={vars:{},spatialReference:i,interceptor:p,timeZone:l,lrucache:s,useAsync:a,services:S,console:t,abortSignal:m};return n&&w(f.vars,e.variables,n,o,r),f}function v(e,n){switch(n.getArcadeType(e)){case"number":case"text":case"boolean":case"point":case"polygon":case"polyline":case"multipoint":case"extent":return e;case"date":return e.toJSDate();case"time":case"dateOnly":return e.toString();case"feature":{const r=(e.type,e),o="geometry"in r?r.geometry():null,a="readAttributes"in r?r.readAttributes():r.attributes;return new I({geometry:o,attributes:a})}case"dictionary":{const r=e,o=r.attributes,a={};for(const i of Object.keys(o))a[i]=v(r.field(i),n);return a}case"array":return("toArray"in e?e.toArray():e).map(r=>v(r,n))}return e}const Z={variables:[{name:"$feature",type:"feature"},{name:"$layer",type:"featureSet"},{name:"$datastore",type:"featureSetCollection"},{name:"$map",type:"featureSetCollection"},{name:"$userInput",type:"geometry"},{name:"$graph",type:"knowledgeGraph"}]},D={variables:[{name:"$feature",type:"feature"},{name:"$aggregatedFeatures",type:"featureSet"}]},O=new Map([["aggregate-field",{variables:[{name:"$feature",type:"feature"}]}],["form-constraint",{variables:[{name:"$feature",type:"feature"}]}],["feature-z",{variables:[{name:"$feature",type:"feature"}]}],["field-calculation",{variables:[{name:"$feature",type:"feature"},{name:"$datastore",type:"featureSetCollection"}]}],["form-calculation",{variables:[{name:"$feature",type:"feature"},{name:"$originalFeature",type:"feature"},{name:"$layer",type:"featureSet"},{name:"$featureSet",type:"featureSet"},{name:"$datastore",type:"featureSetCollection"},{name:"$map",type:"featureSetCollection"},{name:"$editContext",type:"dictionary",properties:[{name:"editType",type:"text"}]}]}],["labeling",{variables:[{name:"$feature",type:"feature"}]}],["popup",Z],["popup-element",Z],["feature-reduction-popup",D],["feature-reduction-popup-element",D],["visualization",{variables:[{name:"$feature",type:"feature"},{name:"$view",type:"dictionary",properties:[{name:"scale",type:"number"}]}]}]]);function Je(e){const n=O.get(e);if(!n){const r=Array.from(O.keys()).map(o=>`'${o}'`).join(", ");throw new g("createArcadeProfile:invalid-profile-name",`Invalid profile name '${e}'. You must specify one of the following values: ${r}`)}return G(n)}async function Me(e,n,r={}){b||(b=await L());const{arcade:o,arcadeUtils:a}=b,{loadScriptDependencies:i,referencesMember:p,scriptIsAsync:s}=o,t=U(n.variables,[]),m=t.filter(c=>c.type==="featureSet"||c.type==="featureSetCollection").map(c=>c.name.toLowerCase()),l=o.parseScript(e,m);if(!l)throw new g("arcade:invalid-script","Unable to create SyntaxTree");const S=a.extractFieldNames(l),f=o.scriptTouchesGeometry(l),C=t.map(c=>c.name.toLowerCase()).filter(c=>p(l,c)),u=s(l,m);await i(l,u,m);const h={vars:{},spatialReference:null,useAsync:u};for(const c of C)h.vars[c]="any";const{lruCache:A}=r,x=o.compileScript(l,h),k=o.featureSetUtils(),{services:j}=r;return{execute:(c,y={})=>{if(u)throw new g("arcade:invalid-execution-mode","Cannot execute the script in synchronous mode");const d=x(R(n,c,{lruCache:A,...y},k,u));return y.rawOutput?d:v(d,a)},executeAsync:async(c,y={})=>{const d=await x(R(n,c,{lruCache:A,services:j,...y},k,u));return y.rawOutput?d:v(d,a)},isAsync:u,variablesUsed:C,fieldsUsed:S,geometryUsed:f,syntaxTree:l}}export{Me as createArcadeExecutor,Je as createArcadeProfile};
